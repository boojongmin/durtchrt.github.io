<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>개발 저장소</title>
    <link>http://durtchrt.github.io/blog/index.xml</link>
    <description>Recent content on 개발 저장소</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>durtchrt</copyright>
    <lastBuildDate>Mon, 31 Oct 2016 17:08:57 +0900</lastBuildDate>
    <atom:link href="http://durtchrt.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>java generics 번역 3</title>
      <link>http://durtchrt.github.io/blog/java/generics/3/</link>
      <pubDate>Mon, 31 Oct 2016 17:08:57 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/generics/3/</guid>
      <description>&lt;p&gt;Generic Types&lt;/p&gt;

&lt;p&gt;generic type은 일반적인 클래스, 인터페이스를 타입 파라미터화하는 것이다. Box 클래스는 개념을 증명하며 코드가 변경되어질 것입니다.
&lt;code&gt;A generic type is a generic class or interface that is parameterized over types. The following Box class will be modified to demonstrate the concept.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Simple Box Class&lt;/p&gt;

&lt;p&gt;generic을 사용하지 않은 예제로 시작해봅시다. Box 클래스는 모든 타입의 object에서 동작합니다. Box 클래스는 set(추가), get(조회) 2개의 메서드가 있습니다.
&lt;code&gt;Begin by examining a non-generic Box class that operates on objects of any type. It needs only to provide two methods: set, which adds an object to the box, and get, which retrieves it:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Box {
    private Object object;

    public void set(Object object) { this.object = object; }
    public Object get() { return object; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;객체의 set, get 메서드는 기본형을 제외하면 어떤 타입(참조형)이든 인자로 넣을수 있다. Box 클래스가 사용되어지지만 컴파일 타임에 검증할 방법이 없다. 코드의 한파트에서는 Integer를 넣고 Integer가 return되어지길 기대하지만 다른 한쪽 코드에서는 실수로 String을 입력해서 런타임 에러가 나올 것입니다.
&lt;code&gt;Since its methods accept or return an Object, you are free to pass in whatever you want, provided that it is not one of the primitive types. There is no way to verify, at compile time, how the class is used. One part of the code may place an Integer in the box and expect to get Integers out of it, while another part of the code may mistakenly pass in a String, resulting in a runtime error.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Generic 버전의 Box 클래스.&lt;br&gt;
&lt;code&gt;A Generic Version of the Box Class&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;generic 클래시는 아래 포멧처럼 정의되었다.&lt;br&gt;
&lt;code&gt;A generic class is defined with the following format:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class name&amp;lt;T1, T2, ..., Tn&amp;gt; { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;타입 파라미터 문법은 클래스명 뒤에 꺽쇠(&amp;lt;&amp;gt;) 기호로 구분된다. 이것은 T1, T2, &amp;hellip;, and Tn 등으로 타입 파라미터를 명시한다.(타입변수라고 불리기도한다.) .
&lt;code&gt;The type parameter section, delimited by angle brackets (&amp;lt;&amp;gt;), follows the class name. It specifies the type parameters (also called type variables) T1, T2, ..., and Tn.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Box 클래스를 generics로 변경해보자. &amp;ldquo;public class Box&amp;rdquo; 코드를 &amp;ldquo;public class Box&lt;T&gt;&amp;ldquo;로 변경해서 generic 타입을 선언하여 생성한다. T라는 타입 변수를 말하자면 클래스 안 어디든지 사용할 수 있는 변수이다.
&lt;code&gt;To update the Box class to use generics, you create a generic type declaration by changing the code &amp;quot;public class Box&amp;quot; to &amp;quot;public class Box&amp;lt;T&amp;gt;&amp;quot;. This introduces the type variable, T, that can be used anywhere inside the class.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Box 클래스가 이렇게 바뀝니다.&lt;br&gt;
&lt;code&gt;With this change, the Box class becomes:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Generic version of the Box class.
 * @param &amp;lt;T&amp;gt; the type of the value being boxed
 */
public class Box&amp;lt;T&amp;gt; {
    // T stands for &amp;quot;Type&amp;quot;
    private T t;

    public void set(T t) { this.t = t; }
    public T get() { return t; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;소스 코드 변경에서 보이듯이, 기존 코드에서 Object 대신 T로 수정되었다. Type 변수는 기본형 빼고는(=참조형)이면 된다.(클래스/인터페이스/배열 타입 또는 다른 Type 변수가 Type 변수로 될 수 있다.)
&lt;code&gt;As you can see, all occurrences of Object are replaced by T. A type variable can be any non-primitive type you specify: any class type, any interface type, any array type, or even another type variable.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;generic 인터페이스를 만드는 방법도 같다.&lt;br&gt;
&amp;lsquo;This same technique can be applied to create generic interfaces.&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Type 파라미터 네이밍 관습&lt;br&gt;
&lt;code&gt;Type Parameter Naming Conventions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;관습에 의하면, Type 파라미터는 단일 대문자입니다. 이 기준은 이미 알고 있는 변수 네이밍 관습에 극명하게 반대입니다. (좋은점은)이런 관습이 없으면 Type 변수와 일반적인 클래스 혹은 인터페이스명 사이에 차이를 전달하기 어렵울겁니다.
&lt;code&gt;By convention, type parameter names are single, uppercase letters. This stands in sharp contrast to the variable naming conventions that you already know about, and with good reason: Without this convention, it would be difficult to tell the difference between a type variable and an ordinary class or interface name.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 사용되어지는 Type파라메터명입니다.&lt;br&gt;
&lt;code&gt;The most commonly used type parameter names are:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types
You&amp;rsquo;ll see these names used throughout the Java SE API and the rest of this lesson.&lt;/p&gt;

&lt;p&gt;Invoking and Instantiating a Generic Type&lt;/p&gt;

&lt;p&gt;To reference the generic Box class from within your code, you must perform a generic type invocation, which replaces T with some concrete value, such as Integer:&lt;/p&gt;

&lt;p&gt;Box&lt;Integer&gt; integerBox;
You can think of a generic type invocation as being similar to an ordinary method invocation, but instead of passing an argument to a method, you are passing a type argument — Integer in this case — to the Box class itself.&lt;/p&gt;

&lt;p&gt;Type Parameter and Type Argument Terminology: Many developers use the terms &amp;ldquo;type parameter&amp;rdquo; and &amp;ldquo;type argument&amp;rdquo; interchangeably, but these terms are not the same. When coding, one provides type arguments in order to create a parameterized type. Therefore, the T in Foo&lt;T&gt; is a type parameter and the String in Foo&lt;String&gt; f is a type argument. This lesson observes this definition when using these terms.
Like any other variable declaration, this code does not actually create a new Box object. It simply declares that integerBox will hold a reference to a &amp;ldquo;Box of Integer&amp;rdquo;, which is how Box&lt;Integer&gt; is read.&lt;/p&gt;

&lt;p&gt;An invocation of a generic type is generally known as a parameterized type.&lt;/p&gt;

&lt;p&gt;To instantiate this class, use the new keyword, as usual, but place &lt;Integer&gt; between the class name and the parenthesis:&lt;/p&gt;

&lt;p&gt;Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();
The Diamond&lt;/p&gt;

&lt;p&gt;In Java SE 7 and later, you can replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments (&amp;lt;&amp;gt;) as long as the compiler can determine, or infer, the type arguments from the context. This pair of angle brackets, &amp;lt;&amp;gt;, is informally called the diamond. For example, you can create an instance of Box&lt;Integer&gt; with the following statement:&lt;/p&gt;

&lt;p&gt;Box&lt;Integer&gt; integerBox = new Box&amp;lt;&amp;gt;();
For more information on diamond notation and type inference, see Type Inference.&lt;/p&gt;

&lt;p&gt;Multiple Type Parameters&lt;/p&gt;

&lt;p&gt;As mentioned previously, a generic class can have multiple type parameters. For example, the generic OrderedPair class, which implements the generic Pair interface:&lt;/p&gt;

&lt;p&gt;public interface Pair&lt;K, V&gt; {
    public K getKey();
    public V getValue();
}&lt;/p&gt;

&lt;p&gt;public class OrderedPair&lt;K, V&gt; implements Pair&lt;K, V&gt; {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private K key;
private V value;

public OrderedPair(K key, V value) {
this.key = key;
this.value = value;
}

public K getKey()   { return key; }
public V getValue() { return value; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
The following statements create two instantiations of the OrderedPair class:&lt;/p&gt;

&lt;p&gt;Pair&lt;String, Integer&gt; p1 = new OrderedPair&lt;String, Integer&gt;(&amp;ldquo;Even&amp;rdquo;, 8);
Pair&lt;String, String&gt;  p2 = new OrderedPair&lt;String, String&gt;(&amp;ldquo;hello&amp;rdquo;, &amp;ldquo;world&amp;rdquo;);
The code, new OrderedPair&lt;String, Integer&gt;, instantiates K as a String and V as an Integer. Therefore, the parameter types of OrderedPair&amp;rsquo;s constructor are String and Integer, respectively. Due to autoboxing, it is valid to pass a String and an int to the class.&lt;/p&gt;

&lt;p&gt;As mentioned in The Diamond, because a Java compiler can infer the K and V types from the declaration OrderedPair&lt;String, Integer&gt;, these statements can be shortened using diamond notation:&lt;/p&gt;

&lt;p&gt;OrderedPair&lt;String, Integer&gt; p1 = new OrderedPair&amp;lt;&amp;gt;(&amp;ldquo;Even&amp;rdquo;, 8);
OrderedPair&lt;String, String&gt;  p2 = new OrderedPair&amp;lt;&amp;gt;(&amp;ldquo;hello&amp;rdquo;, &amp;ldquo;world&amp;rdquo;);
To create a generic interface, follow the same conventions as for creating a generic class.&lt;/p&gt;

&lt;p&gt;Parameterized Types&lt;/p&gt;

&lt;p&gt;You can also substitute a type parameter (i.e., K or V) with a parameterized type (i.e., List&lt;String&gt;). For example, using the OrderedPair&lt;K, V&gt; example:&lt;/p&gt;

&lt;p&gt;OrderedPair&lt;String, Box&lt;Integer&gt;&amp;gt; p = new OrderedPair&amp;lt;&amp;gt;(&amp;ldquo;primes&amp;rdquo;, new Box&lt;Integer&gt;(&amp;hellip;));&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Generics 번역 2</title>
      <link>http://durtchrt.github.io/blog/java/generics/2/</link>
      <pubDate>Mon, 31 Oct 2016 15:52:48 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/generics/2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/generics/why.html&#34;&gt;원문&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generics는 왜 사용하는가&lt;/strong&gt;  (Why Use Generics?)&lt;/p&gt;

&lt;p&gt;간단히 말하면, generics는 타입을 클래스, 인터페이스, 메소드를 정의할 때 파라메터화 할 수 있다. 메소드 선언에 사용되는 파라미터 형식처럼, 타입 파라미터는 다른 입력값을 같은 코드를 재 사용할 수 있는 방법을 제시한다. 다른점은 형식 파라미터는 값이 입력이다, 타입 파라메터는 타입이 입력이다.
&lt;code&gt;In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods. Much like the more familiar formal parameters used in method declarations, type parameters provide a way for you to re-use the same code with different inputs. The difference is that the inputs to formal parameters are values, while the inputs to type parameters are types.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;generic를 사용한 코드는 그렇지 않는 코드 대비 많은 장점을 가졌다:
&lt;code&gt;Code that uses generics has many benefits over non-generic code&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;컴파일 타임에 강력한 타입 체크를한다.
&lt;code&gt;Stronger type checks at compile time.&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자바 컴파일러는 타입 안전성에 위반하는 코드가 있다면 일반적인 코드와 오류 이슈에 강한 타입 검사를 적용한다. 컴파일타임에 에러를 고치는 것은 런타임 에러를 고치는 것 보다 쉽다.&lt;br /&gt;
&lt;code&gt;A Java compiler applies strong type checking to generic code and issues errors if the code violates type safety. Fixing compile-time errors is easier than fixing runtime errors, which can be difficult to find.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Elimination of casts. &lt;br/&gt;
generics 없이 캐스팅이 필요한 코드 조각입니다.
&lt;code&gt;The following code snippet without generics requires casting:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List list = new ArrayList();
list.add(&amp;quot;hello&amp;quot;);
String s = (String) list.get(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generics를 사용해서 코드를 다시 작성하면, 코드는 더이상 캐스팅이 필요 없어집니다.
&lt;code&gt;When re-written to use generics, the code does not require casting:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
list.add(&amp;quot;hello&amp;quot;);
String s = list.get(0);   // no cast
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;프로그래머들이 일반적인 알고리즘을 구현하도록 지원한다.&lt;br&gt;
generics를 사용하면서 프로그래머들은 다양한 타입들의 콜렉션에서 동작하고, 수정가능하며, 더 안정적이고 읽기 쉬운 코드를 일반적인 알고리즘으로 구현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Enabling programmers to implement generic algorithms.
By using generics, programmers can implement generic algorithms that work on collections of different types, can be customized, and are type safe and easier to read.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>크롬에 자주사용하는 javascript 즐겨찾기로 추가하기</title>
      <link>http://durtchrt.github.io/blog/2016/10/26/daum_favorites_javascript/</link>
      <pubDate>Wed, 26 Oct 2016 18:19:58 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/2016/10/26/daum_favorites_javascript/</guid>
      <description>

&lt;h5 id=&#34;시작하기전-용어-정리&#34;&gt;시작하기전 용어 정리&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;주소표시줄: 웹브라우저에서 url을 입력하는 영역&lt;/li&gt;
&lt;li&gt;스크립트 : 웹브라우저가 읽을수 있는 프로그램 코드 자바스크립트를 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-자바스크립트-주소표시줄에서-실행&#34;&gt;1. 자바스크립트 주소표시줄에서 실행&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../script_run.png&#34; alt=&#34;주소창에서스크립트실행하기&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:alert(&#39;Hello World!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 코드를 주소표시줄에 &lt;em&gt;직접&lt;/em&gt; 타이핑해보세요&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(주소표시줄에 복사/붙여넣기하면 &amp;lsquo;javascript:&amp;rsquo; 글자가 없어져서 제대로 동작을하지 않아요)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../script_run_after.png&#34; alt=&#34;주소창에서스크립트실행후화면&#34; /&gt;&lt;/p&gt;

&lt;p&gt;위의 이미지처럼 alert창이 나오면 스크립트 실행이 된 것입니다.&lt;/p&gt;

&lt;h3 id=&#34;2-자바스크립트-즐겨찾기-추가&#34;&gt;2. 자바스크립트 즐겨찾기 추가&lt;/h3&gt;

&lt;p&gt;웹브라우저가 제공하는 기능으로 즐겨찾기가 있습니다.
&lt;img src=&#34;../bookmark_manager.png&#34; alt=&#34;bookmark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;크롬의 우측에 있는 메뉴를 보면 북마크 관리자가 있습니다. 북마크 관리자를 클릭하면
아래의 화면이 보이실 겁니다.(단축키: 옵션 + 커맨드 + B)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmark_manager_1.png&#34; alt=&#34;bookmark_manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이 화면에서 우클릭을 하시면 아래의 메뉴가 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmark_manager_menu.png&#34; alt=&#34;북마크메뉴&#34; /&gt;&lt;/p&gt;

&lt;p&gt;메뉴에서 페이지 추가를 누르시고&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmark_add_page.png&#34; alt=&#34;페이지추가&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이미지와 같이 페이지를 추가해주세요&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmark_added_page.png&#34; alt=&#34;페이지추가후&#34; /&gt;&lt;/p&gt;

&lt;p&gt;페이지가 즐겨찾기가 추가된 것을 보실수 있습니다.&lt;/p&gt;

&lt;p&gt;추가된 즐겨찾기에서 더블클릭을하시면 새창으로 즐겨찾기된 페이지가 나오는 것을 보실수 있습니다.
&lt;img src=&#34;../daum.png&#34; alt=&#34;다음&#34; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 즐겨찾기에 자바스크립트를 추가해보겠습니다.&lt;/p&gt;

&lt;p&gt;다시 북마크 관리자로 이동하신 후 아래의 이미지처럼 우클릭 후 폴더추가를 해주세요&lt;br /&gt;
&lt;img src=&#34;../bookmark_add_javascript.png&#34; alt=&#34;자바스크립트 추가&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../alert_script.png&#34; alt=&#34;북마크alert&#34; /&gt;&lt;/p&gt;

&lt;p&gt;만들어진 즐겨찾기를 더블클릭해보면 새창이 열리면서 alert차이 나오는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../after_alert_script.png&#34; alt=&#34;북마크alert후&#34; /&gt;&lt;/p&gt;

&lt;p&gt;현시점까지는 스크립트가 북마크창에서만 실행시킬 수 밖에 없는 문제가 있습니다.
이것을 해결하는 방법은 &lt;strong&gt;북마크바&lt;/strong&gt; 를 추가하는 것입니다.&lt;/p&gt;

&lt;h2 id=&#34;3-북마크바-추가&#34;&gt;3. 북마크바 추가&lt;/h2&gt;

&lt;p&gt;크롬 메뉴를 보시면
&lt;img src=&#34;../bookmarkbarmenu.png&#34; alt=&#34;북마크바메뉴&#34; /&gt;&lt;/p&gt;

&lt;p&gt;북마크바 표시를 클릭해보시면 주소표시줄에 아래의 이미지 처럼 북마크 바가 추가된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmarkbar.png&#34; alt=&#34;북마크바&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../bookmarkbar2.png&#34; alt=&#34;북마크바2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 페이지에서 북마크된 스크립트를 실행해보면&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../daum_alert.png&#34; alt=&#34;북마크스크립트 실행&#34; /&gt;&lt;/p&gt;

&lt;p&gt;페이지에서 alert창이 나오는 것을 볼수 있습니다.&lt;/p&gt;

&lt;p&gt;다음 포스트는 유용한 스크립트들 모음을 작성할 예정입니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>